/* Copyright © 2006 Nokia. */
// This class was generated by 172 StubGenerator.
// Contents subject to change without notice.
// @generated

package com.nokia.midp.examples.webservices;

import javax.xml.rpc.JAXRPCException;
import javax.xml.namespace.QName;
import javax.microedition.xml.rpc.Operation;
import javax.microedition.xml.rpc.Type;
import javax.microedition.xml.rpc.Element;

/**
 * A generated class.
 */
public class CapitalPortType_Stub implements com.nokia.midp.examples.webservices.CapitalPortType, javax.xml.rpc.Stub {
	private String[] _propertyNames;
	private Object[] _propertyValues;
        private String serverIPAddress;

	public CapitalPortType_Stub() {
		_propertyNames = new String[] {ENDPOINT_ADDRESS_PROPERTY};
                //NOTE: localhost is ok for testing with WTK emulator but other emulators
                //may require the actual hostname of IP address in the URL.  If you are
                //are using an emulator other than WTK you should update the URL to use
                //the actual hostname or IP address.  You should make this change in the
                //WSDL source file (see CapitalServlet).
	}
        /**
         * Set the server IP address and the servlet address
         * @param ip String the IP address user provides.
         */
        public void setServerIPAddress(String ip){
          serverIPAddress = ip;
          //also set the servelet address.
          _propertyValues = new Object[] {"http://" + ip + ":8080/CapitalService/"};
        }

        private String getServerIPAddress(){
           return serverIPAddress;
        }

	public void _setProperty(String name, Object value) {
		int size = _propertyNames.length;
		for (int i = 0; i < size; ++i) {
			if (_propertyNames[i].equals(name)) {
				_propertyValues[i] = value;
				return;
			}
		}
		// Need to expand our array for a new property
		String[] newPropNames = new String[size + 1];
		System.arraycopy(_propertyNames, 0, newPropNames, 0, size);
		_propertyNames = newPropNames;
		Object[] newPropValues = new Object[size + 1];
		System.arraycopy(_propertyValues, 0, newPropValues, 0, size);
		_propertyValues = newPropValues;

		_propertyNames[size] = name;
		_propertyValues[size] = value;
	}

	public Object _getProperty(String name) {
		for (int i = 0; i < _propertyNames.length; ++i) {
			if (_propertyNames[i].equals(name)) {
				return _propertyValues[i];
			}
		}
		if (ENDPOINT_ADDRESS_PROPERTY.equals(name) || USERNAME_PROPERTY.equals(name) || PASSWORD_PROPERTY.equals(name)) {
			return null;
		}
		if (SESSION_MAINTAIN_PROPERTY.equals(name)) {
			return new java.lang.Boolean(false);
		}
		throw new JAXRPCException("Stub does not recognize property: "+name);
	}

	protected void _prepOperation(Operation op) {
		for (int i = 0; i < _propertyNames.length; ++i) {
			op.setProperty(_propertyNames[i], _propertyValues[i].toString());
		}
	}

	//
	//  Begin user methods
	//

	public java.lang.String getCapital(java.lang.String nation) throws java.rmi.RemoteException {
		// Copy the incoming values into an Object array if needed.

		Operation op = Operation.newInstance(_qname_getCapital, _type_request, _type_response);
		_prepOperation(op);
		op.setProperty(Operation.SOAPACTION_URI_PROPERTY, "");
		Object resultObj;
		try {
			resultObj = op.invoke(nation);
		} catch (JAXRPCException e) {
			Throwable cause = e.getLinkedCause();
			if (cause instanceof java.rmi.RemoteException) {
				throw (java.rmi.RemoteException) cause;
			}
			throw e;
		}
		java.lang.String result;
		// Convert the result into the right Java type.
		result = (java.lang.String)resultObj;
		return result;
	}
	//
	//  End user methods
	//

	protected static final QName _qname_request = new QName("urn:nokia:midp:examples:webservices:capitals:2005-01/types", "request");
	protected static final QName _qname_response = new QName("urn:nokia:midp:examples:webservices:capitals:2005-01/types", "response");
	protected static final QName _qname_getCapital = new QName("urn:nokia:midp:examples:webservices:capitals:2005-01/wsdl", "getCapital");
	protected static final Element _type_request;
	protected static final Element _type_response;
	static {
		// Create all of the Type's that this stub uses, once.
		_type_request = new Element(_qname_request, Type.STRING);
		_type_response = new Element(_qname_response, Type.STRING);
	}

}
